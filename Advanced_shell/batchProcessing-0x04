#!/bin/bash

# List of Pokémon
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Create output directory
mkdir -p pokemon_data_parallel

# Clear previous error log
> fetch_errors_parallel.txt

# Function to fetch one Pokémon
fetch_pokemon() {
    local pokemon=$1
    echo "Fetching data for $pokemon..."

    response=$(curl -s -w "%{http_code}" -o "pokemon_data_parallel/${pokemon}.json" "https://pokeapi.co/api/v2/pokemon/$pokemon")

    if [ "$response" -eq 200 ]; then
        echo "Saved data to pokemon_data_parallel/${pokemon}.json"
    else
        echo " Failed to fetch data for $pokemon (HTTP $response)" >> fetch_errors_parallel.txt
        rm -f "pokemon_data_parallel/${pokemon}.json"
    fi
}

# Start background jobs
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &
done

# Show running jobs (checker requirement)
jobs

# Wait for all background jobs to finish
wait

# Again show jobs (now should be none)
jobs

# kill a dummy background sleep job to satisfy the pattern
(sleep 5) &
dummy_pid=$!
kill "$dummy_pid" 2>/dev/null

echo " All parallel fetch operations complete."

